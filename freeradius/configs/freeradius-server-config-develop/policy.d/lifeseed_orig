ls_calc_hmac_password {
        -ls_pl_calc_hmac_password
}

ls_convert_nas_attributes {
	ls_pl_convert_attributes
}

ls_decrypt_attributes {
	-ls_pl_decrypt_attributes
}

ls_sql_local_realm_flow {
	# NOTE: Maintain a regular expression that takes the realm.
	if (&User-Name =~ /@(.*)$/) {
		update request {
			Rd-Realm := "%{1}"
		}

		# NOTE: Realms that exist in the DB are processed locally.
		if ("%{sql:SELECT COUNT(*) FROM realms WHERE name = '%{request:Rd-Realm}' \
				OR suffix = '%{request:Rd-Realm}'}" > 0) {
			update control {
				Proxy-To-Realm := LOCAL
			}
		} else {
			ls_determine_proxy_destination
		}

		update request {
			Rd-Realm := ""
		}
	}
}

ls_sql_check_proxy {
	if (&control:Ls-Proxy-Check-Request) {
		# 1. Get the associated realm from NAS-Identifier.
		# 2. Get the proxy destination allowed in the realm.
		# 3. Check if the proxy name matches.

		if ("%{sql:SELECT COUNT(*) FROM nas INNER JOIN na_realms ON nas.id = na_realms.na_id \
				INNER JOIN proxies_realms ON na_realms.realm_id = proxies_realms.realm_id \
				INNER JOIN proxies ON proxies_realms.proxy_id = proxies.id \
				WHERE nas.nasidentifier = '%{request:NAS-Identifier}' \
				AND proxies.name = '%{control:Ls-Proxy-Check-Request}'}" > 0) {
			update control {
				Ls-Proxy-Check-Result := control:Ls-Proxy-Check-Request
			}
		}

		if (!&control:Ls-Proxy-Check-Result || \
		    control:Ls-Proxy-Check-Result != control:Ls-Proxy-Check-Request) {
			update control {
				Ls-Proxy-Check-Request := ''
				Ls-Proxy-Check-Result := ''
			}
		}
	}
}

ls_determine_proxy_destination {
	if (&request:NAS-Identifier) {
		# "Called-Station-Id" and "User-Name" values are used by Perl to search
		# SQL and determine the forwarding destination in the proxy.
		ls_pl_determine_proxy_destination

		# Determine whether the "NAS-Identifier" requesting authentication
		# can use the forwarding proxy.
		ls_sql_check_proxy
	}

	if (&control:Ls-Proxy-Check-Request) {
		if (&control:Ls-Proxy-Check-Result == control:Ls-Proxy-Check-Request) {
			update control {
				Proxy-To-Realm := control:Ls-Proxy-Check-Result
			}
		} else {
			update control {
				Proxy-To-Realm := LOCAL
			}
		}
	} else {
		update control {
			Proxy-To-Realm := LOCAL
		}
	}

	update control {
		Ls-Proxy-Check-Request := ''
		Ls-Proxy-Check-Result := ''
	}
}

ls_use_original_user_name {
        if (&request:Ls-Original-User-Name) {
                update request {
                        User-Name := request:Ls-Original-User-Name
                }
        }
}

ls_use_profile_user_name {
        if (&request:Ls-Profile-User-Name) {
                update request {
                        User-Name := request:Ls-Profile-User-Name
                }
        }
}

ls_set_rd_realm_by_user_name {
	if (&User-Name =~ /@(.*)$/) {
		update request {
			Rd-Realm := "%{1}"
		}

		# Use the realm in User-Name.
		if ("%{sql:SELECT COUNT(*) FROM realms WHERE name = '%{request:Rd-Realm}' \
				OR suffix = '%{request:Rd-Realm}'}" > 0) {
			update control {
				Rd-Realm := "%{sql:SELECT IFNULL((SELECT name FROM realms WHERE name='%{request:Rd-Realm}' OR suffix='%{request:Rd-Realm}'),'rd_not_found')}"
			}
		}

		update request {
			Rd-Realm := ""
		}
	}
}

ls_fetch_outer_nas_info {
	if (&outer.request:NAS-IP-Address) {
		update request {
			NAS-IP-Address := outer.request:NAS-IP-Address
		}
	}
	if (&outer.request:NAS-Identifier) {
		update request {
			NAS-Identifier := outer.request:NAS-Identifier
		}
	}
	if (&outer.request:NAS-Port) {
		update request {
			NAS-Port := outer.request:NAS-Port
		}
	}
}

ls_replace_outer_reply_user_name {
	update outer.session-state {
		User-Name := &User-Name
	}
}

ls_revert_hmac_password {
        # Revert the Cleartext-Password changed during the call to rlm_sql to
        # the one generated by HMAC if User-Name is for authentication with HMAC.

	if (&control:Ls-Hmac-Cleartext-Password) {
		if (&control:Cleartext-Password != control:Ls-Hmac-Cleartext-Password) {
			update control {
				Cleartext-Password := control:Ls-Hmac-Cleartext-Password
			}
		}
	}
}
